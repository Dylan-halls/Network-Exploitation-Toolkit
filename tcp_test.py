from scapy.all import *
from termcolor import colored

def pkthandler(pkt):
	try:
		ip = pkt[IP]
	except IndexError:
		pass

	try:
		src = ip.src
		dst = ip.dst
	except UnboundLocalError:
		pass

	if pkt.haslayer(TCP):
         tcp = pkt[TCP]

         if tcp.flags == 2:
         	tcp.flags == 'SYN'
         elif tcp.flags == 4:
         	tcp.flags == 'RST'
         elif tcp.flags == 16:
         	tcp.flags == 'ACK'
         elif tcp.flags == 32:
            tcp.flags == 'URG'
         elif tcp.flags == 8:
            tcp.flags == 'PSH'

         print("--------------------------------------------------------\n\n")
         print("                     .:{}:.                            ".format(colored('TCP','red')))
         print("                                                          ")
         print("  \033[1;36mSource IP:\033[00m {} \033[1;36mDestination IP:\033[00m {}".format(src, dst))
        # print("                                                          ")
         print("  \033[1;36mSource Port:\033[00m {} \033[1;36mDestination Port:\033[00m {}".format(tcp.sport, tcp.dport))
        # print("                                                          ")
         print("  \033[1;36mSequence Number:\033[00m {}                         ".format(tcp.seq))
        # print("                                                          ")
         print("  \033[1;36mAcknowledgement Number:\033[00m {}                         ".format(tcp.ack))
        # print("                                                          ")
         print("  \033[1;36mData Offset:\033[00m {}                         ".format(tcp.dataofs))
        # print("                                                          ")
         print("  \033[1;36mReserved:\033[00m {}                               ".format(tcp.reserved))
        # print("                                                          ")
         if tcp.flags == 2:
            print("  \033[1;36mFlags:\033[00m {}                                ".format('SYN'))
         elif tcp.flags == 4:
            print("  \033[1;36mFlags:\033[00m {}                                ".format('RST'))
         elif tcp.flags == 16:
         	print("  \033[1;36mFlags:\033[00m {}                                ".format('ACK'))
         elif tcp.flags == 32:
         	print("  \033[1;36mFlags:\033[00m {}                                ".format('URG'))
         elif tcp.flags == 8:
         	print("  \033[1;36mFlags:\033[00m {}                                ".format('PSH'))
         elif tcp.flags == 1:
         	print("  \033[1;36mFlags:\033[00m {}                                ".format('FIN'))
        # print("                                                          ")
         print("  \033[1;36mWindow Size:\033[00m {}                         ".format(tcp.window))
        # print("                                                          ")
         print("  \033[1;36mChecksum:\033[00m {}                         ".format(tcp.chksum))
        # print("                                                          ")
         print("  \033[1;36mUrgent Pointer:\033[00m {}                         ".format(tcp.urgptr))
        # print("                                                           ")
        # print("  \033[1;36mOptions:\033[00m {}                         ".format(tcp.options[1]))


pkt = sniff(iface='wlan0' ,prn=pkthandler)