import socket, struct, threading, textwrap, sys, os

def Mainsniffer():
   
   TAB_1 = '\t - '
   TAB_2 = '\t\t -'
   TAB_3 = '\t\t\t - '
   TAB_4 = '\t\t\t\t -'

   DATA_TAB_1 = ' '
   DATA_TAB_2 = '\t\t '
   DATA_TAB_3 = '\t\t\t '
   DATA_TAB_4 = '\t\t\t\t '

   os.system("clear")

   print("______               _           _                 _   __   __  ")             
   print("| ___ \             | |         | |               (_) / _| / _|  ")          
   print("| |_/ /  __ _   ___ | | __  ___ | |_   ___  _ __   _ | |_ | |_   ___  _ __   ")
   print("|  __/  / _` | / __|| |/ / / _ \| __| / __|| '_ \ | ||  _||  _| / _ \| '__|  ")
   print("| |    | (_| || (__ |   < |  __/| |_  \__ \| | | || || |  | |  |  __/| |   ")   
   print("|_|     \__,_| \___||_|\_\ \___| \__| |___/|_| |_||_||_|  |_|   \___||_|  ") 
                                                                           
   seconds = 5
   print (' ')
   while seconds >= 0:
      sys.stdout.write('\r \r')
      sys.stdout.write("Ready in: ")
      sys.stdout.write(str(seconds))
      sys.stdout.flush()
      time.sleep(1)
      seconds -= 1

   conn = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.ntohs(3))

   while True:
      raw_data, addr = conn.recvfrom(65536)
      dest_mac, src_mac, eth_proto, data = ethernet_frame(raw_data)
      if dest_mac and src_mac == '00:00:00:00:00:00':
         pass
      else:
         print("\nEthernet Frame:")
         print(TAB_1 + "Destination: {}, Source: {}, Protocol: {}".format(dest_mac, src_mac, eth_proto))

         # make sure using ipv4 version 8
         if eth_proto == 8:
            (version, header_length, ttl, proto, src, target, data) = ipv4_packets(data)
            print(TAB_1 + "IPv4 packet:")
            print(TAB_2 + "Version: {}, Header_Length: {}, TTL: {}".format(version, header_length, ttl))
            print(TAB_3 + "Protocol: {}, Source: {}, Target: {}".format(proto, src, target))
         
            # if data is ICMP the display properly
            if proto == 1:
               icmp_type, code, checksum, data = icmp_packet(data)
               print(TAB_1 + "IPv4 Packet:")
               print(TAB_2 + "Type: {}, Code: {}, Checksum: {},".format(icmp_type, code, checksum))
               print(TAB_2 + "Data:")
               print(format_muti_lines(DATA_TAB_3, data))

            # if data is TCP display correctly
         #   elif proto == 6:
         #      (src_port, dest_port, sequence, acknowledgement, flag_urg, flag_psh, flag_rst, flag_syn, flag_fin, flag_ack, data) = tcp_segment(data)
         #      print(TAB_1 + "TCP Segment: ")
         #      print(TAB_2 + "Source Port: {}, Destination Port: {}".format(src_port, dest_port))
         #      print(TAB_2 + "Sequence: {}, Acknowlegment: {}".format(sequence, acknowlegment))
         #      print(TAB_2 + "Flags: ")
         #      print(TAB_3 + "URG: {}, ACK: {}, PSH: {}, RST: {}, SYN: {}, FIN: {}".format(flag_urg, flag_ack, flag_psh, flag_rst, flag_syn,flag_fin))
         #      print(TAB_2 + "Data: ")
         #      print(format_muti_lines(DATA_TAB_3, data))

            elif proto == 17:
               src_port, dest_port, length, data = udp_segment(data)
               print(TAB_1 + "UDP Segment:")
               print(TAB_2 + "Source port: {}, Destination port: {}".format(src_port, dest_port,))
               print(TAB_2 + "Data: ")
               print(format_muti_lines(DATA_TAB_3, data))

  #un-pack ethernet frame 
def ethernet_frame(data):
     dest_mac, src_mac, proto = struct.unpack('! 6s 6s H', data[:14])
     return get_mac_addr(dest_mac), get_mac_addr(src_mac), socket.htons(proto), data[14:]

  #format mac addr e.g(BB:KK:EE:TT:DD)
def get_mac_addr(bytes_addr):
     bytes_str = map('{:02x}'.format, bytes_addr)
     return ':'.join(bytes_str).upper()
  
  #unpack IPv4
def ipv4_packets(data):
  version_header_length = data[0]
  version = version_header_length >> 4
  header_length = (version_header_length & 15) * 4
  ttl, proto, src, target = struct.unpack('! 8x B B 2x 4s 4s', data[:20])
  return version, header_length, ttl, proto, ipv4(src), ipv4(target), data[header_length:]
  
  #Returns ipv4 prperly formated
def ipv4(addr):
  return '.'.join(map(str, addr))

  #ICMP packet
def icmp_packet(data):
   icmp_type, code, checksum = struct.unpack('! B B H', data[:4])
   return icmp_type, code, checksum, data[4:]

  #unpacks TCP
def tcp_segment(data):
   (src_port, dest_port, sequence, acknowledgement, offset_reserved_flages) = struct.unpack('! H H L L H', data[:14])
   offset = (offset_reserved_flages >> 12) * 4
   flag_urg = (offset_reserved_flages & 32) >> 5
   flag_ack = (offset_reserved_flages & 16) >> 4
   flag_psh = (offset_reserved_flages & 8) >> 3
   flag_rst = (offset_reserved_flages & 4) >> 2
   flag_syn = (offset_reserved_flages & 2) >> 1
   flag_fin = offset_reserved_flages & 1
   return src_port, dest_port, sequence, acknowledgement, offset_reserved_flages, flag_urg, flag_ack, flag_psh, flag_rst, flag_syn, flag_fin, data[offset:]

   #unpacks UDP segment
def udp_segment(data):
  src_port, dest_port, size = struct.unpack('! H H 2x H', data[:8])
  return src_port, dest_port, size, data[8:]

   #Formats multi-line data
def format_muti_lines(prefix, string, size=80):
  size -= len(prefix)
  if isinstance(string, bytes):
     string = ''.join(r'\x{:02x}'.format(byte) for byte in string)
     if size % 2:
        size -= 1
  return '\n'.join([prefix + line for line in textwrap.wrap(string, size)])
